# -*- coding: utf-8 -*-
"""Dataframes_creation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RakXFJ7IYbvFEYpHA6gysZpVfkAtEjpH

# **Creació dels dataframes inicials**

## Mount drive
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd {'/content/drive/MyDrive/TFG'}

"""## Llibreries"""

import os #per manipular estructura directoris
import datetime #per els temps del sistema
import matplotlib.pyplot as plt #per fer els grafics
import math
import numpy as np
import pandas as pd

"""## Usuaris a estudiar"""

users = []
u_nofalls = []
u_falls = []
for folder in os.listdir('data'): #documents que hi han en la carpeta data
  u = str('data/'+ str(folder))
  if os.path.isdir(u): #mirar si és una carpeta
    if os.listdir(u): #mira si hi ha contingut
      users.append(int(folder)) #si en té, volem estudiar aquest usuari
      if os.path.exists(str(str(u)+'/Falls.txt')):
        u_falls.append(int(folder))
      else:
        u_nofalls.append(int(folder))
users.sort()
u_falls.sort()
u_nofalls.sort()
for i in [4,10]: #eliminar dos usuaris que sabem no tenen totes les dades
  users.remove(i)
  u_nofalls.remove(i)
tot_users = len(users)
num_users_nofalls = len(u_nofalls)
num_users_falls = len(u_falls)

print("Usuaris a estudiar:")
print(users)
print("Usuaris a estudiar que han caigut:")
print(u_falls)
print("Usuaris a estudiar que no han caigut:")
print(u_nofalls)

"""## Usuaris i dates a estudiar"""

ruta_sortida = '/dates_estudiar.txt'
if os.path.isfile(ruta_sortida):
  os.remove(ruta_sortida)
for carpeta in users:
  directori = str('data/'+str(carpeta))
  arxius = os.listdir(directori) #arxius dins la carpeta
  fitxers_reg = [arxiu for arxiu in arxius if arxiu.startswith('reg_')] #arxius reg
  dates = [arxiu.split('_')[1].split('.')[0] for arxiu in fitxers_reg] # extreiem les dates
  text = ""
  for data in dates:
    text = text + data + ' ' + str(carpeta) +'\n'
  if not os.path.isfile(ruta_sortida): #mirem si existeix arxiu
    with open(ruta_sortida, 'w') as archivo: #com no existeix, el creem i afegim text
        archivo.write(text)
    print("S'ha creat l'arxiu:", ruta_sortida)
  else: #arxiu existeix
    with open(ruta_sortida, 'r') as archivo: #mirar si text esta ja escrit
        contenido = archivo.read()
    if text in contenido:
        print("El text ja està escrit a l'arxiu", ruta_sortida)
    else: # si no esta escrit, afegir el text
        with open(ruta_sortida, 'a') as archivo:
            archivo.write(text)
        print("S'han afegit les dates de la carpeta " + str(carpeta) + ' al arxiu:', ruta_sortida)
print("Les dates s'han guardat al arxiu:", ruta_sortida)

with open(ruta_sortida, 'r') as arxiu:
    lineas = arxiu.readlines()
    lineas_filtradas = [linea for linea in lineas if not linea.startswith("right")]
with open(ruta_sortida, 'w') as archivo:
    archivo.writelines(lineas_filtradas)

with open(ruta_sortida, 'r') as arxiu:
    text = arxiu.read()
print("Contingut de l'arxiu:")
print(text)

def create_df(user,date):
  try:
    with open(str('data/'+ user + '/reg_' + date + '.txt'), 'r') as doc:
      lines = doc.readlines()

    timestamp_1 = []
    xyz_giroscopi_1 = []
    xyz_accelerometre1_1 = []
    xyz_accelerometre2_1 = []
    sensors_presio_1 = []
    temps_sistema_1 = []
    calibracio_1 = []
    timestamp_2 = []
    xyz_giroscopi_2 = []
    xyz_accelerometre1_2 = []
    xyz_accelerometre2_2 = []
    temps_sistema_2 = []
    sensors_presio_2 = []
    calibracio_2 = []

    for line in lines:
        values = line.strip().split(',')

        # Primera plantilla
        timestamp_1.append(int(values[0]))
        xyz_giroscopi_1.append([int(values[1]), int(values[2]), int(values[3])])
        xyz_accelerometre1_1.append([int(values[4]), int(values[5]), int(values[6])])
        xyz_accelerometre2_1.append([int(values[7]), int(values[8]), int(values[9])])
        sensors_presio_1.append([int(values[i]) for i in range(10, 24)])
        temps_sistema_1.append(int(values[24]))
        calibracio_1.append(int(values[25]))

        # Segona plantilla
        timestamp_2.append(int(values[26]))
        xyz_giroscopi_2.append([int(values[27]), int(values[28]), int(values[29])])
        xyz_accelerometre1_2.append([int(values[30]), int(values[31]), int(values[32])])
        xyz_accelerometre2_2.append([int(values[33]), int(values[34]), int(values[35])])
        sensors_presio_2.append([int(values[i]) for i in range(36, 50)])
        temps_sistema_2.append(int(values[50]))
        calibracio_2.append(int(values[51]))

    df = pd.DataFrame({
      'Usuari': user,
      'P1 timestamp': np.array(timestamp_1),
      'P1 giroscopi X': np.array([sublist[0] for sublist in xyz_giroscopi_1]),
      'P1 giroscopi Y': np.array([sublist[1] for sublist in xyz_giroscopi_1]),
      'P1 giroscopi Z': np.array([sublist[2] for sublist in xyz_giroscopi_1]),
      'P1 accelerometre 1X': np.array([sublist[0] for sublist in xyz_accelerometre1_1]),
      'P1 accelerometre 1Y': np.array([sublist[1] for sublist in xyz_accelerometre1_1]),
      'P1 accelerometre 1Z': np.array([sublist[2] for sublist in xyz_accelerometre1_1]),
      'P1 accelerometre 2X': np.array([sublist[0] for sublist in xyz_accelerometre2_1]),
      'P1 accelerometre 2Y': np.array([sublist[1] for sublist in xyz_accelerometre2_1]),
      'P1 accelerometre 2Z': np.array([sublist[2] for sublist in xyz_accelerometre2_1]),
      'P1 sensor pressió 1': np.array([sublist[0] for sublist in sensors_presio_1]),
      'P1 sensor pressió 2': np.array([sublist[1] for sublist in sensors_presio_1]),
      'P1 sensor pressió 3': np.array([sublist[2] for sublist in sensors_presio_1]),
      'P1 sensor pressió 4': np.array([sublist[3] for sublist in sensors_presio_1]),
      'P1 sensor pressió 5': np.array([sublist[4] for sublist in sensors_presio_1]),
      'P1 sensor pressió 6': np.array([sublist[5] for sublist in sensors_presio_1]),
      'P1 sensor pressió 7': np.array([sublist[6] for sublist in sensors_presio_1]),
      'P1 sensor pressió 8': np.array([sublist[7] for sublist in sensors_presio_1]),
      'P1 sensor pressió 9': np.array([sublist[8] for sublist in sensors_presio_1]),
      'P1 sensor pressió 10': np.array([sublist[9] for sublist in sensors_presio_1]),
      'P1 sensor pressió 11': np.array([sublist[10] for sublist in sensors_presio_1]),
      'P1 sensor pressió 12': np.array([sublist[11] for sublist in sensors_presio_1]),
      'P1 sensor pressió 13': np.array([sublist[12] for sublist in sensors_presio_1]),
      'P1 sensor pressió 14': np.array([sublist[13] for sublist in sensors_presio_1]),
      'P1 Temps Sistema': np.array(temps_sistema_1),
      'P1 Calibració': np.array(calibracio_1),
      #'Fall Labels': fall_labels.flatten()
      'P2 timestamp': np.array(timestamp_2),
      'P2 giroscopi X': np.array([sublist[0] for sublist in xyz_giroscopi_2]),
      'P2 giroscopi Y': np.array([sublist[1] for sublist in xyz_giroscopi_2]),
      'P2 giroscopi Z': np.array([sublist[2] for sublist in xyz_giroscopi_2]),
      'P2 accelerometre 1X': np.array([sublist[0] for sublist in xyz_accelerometre1_2]),
      'P2 accelerometre 1Y': np.array([sublist[1] for sublist in xyz_accelerometre1_2]),
      'P2 accelerometre 1Z': np.array([sublist[2] for sublist in xyz_accelerometre1_2]),
      'P2 accelerometre 2X': np.array([sublist[0] for sublist in xyz_accelerometre2_2]),
      'P2 accelerometre 2Y': np.array([sublist[1] for sublist in xyz_accelerometre2_2]),
      'P2 accelerometre 2Z': np.array([sublist[2] for sublist in xyz_accelerometre2_2]),
      'P2 sensor pressió 1': np.array([sublist[0] for sublist in sensors_presio_2]),
      'P2 sensor pressió 2': np.array([sublist[1] for sublist in sensors_presio_2]),
      'P2 sensor pressió 3': np.array([sublist[2] for sublist in sensors_presio_2]),
      'P2 sensor pressió 4': np.array([sublist[3] for sublist in sensors_presio_2]),
      'P2 sensor pressió 5': np.array([sublist[4] for sublist in sensors_presio_2]),
      'P2 sensor pressió 6': np.array([sublist[5] for sublist in sensors_presio_2]),
      'P2 sensor pressió 7': np.array([sublist[6] for sublist in sensors_presio_2]),
      'P2 sensor pressió 8': np.array([sublist[7] for sublist in sensors_presio_2]),
      'P2 sensor pressió 9': np.array([sublist[8] for sublist in sensors_presio_2]),
      'P2 sensor pressió 10': np.array([sublist[9] for sublist in sensors_presio_2]),
      'P2 sensor pressió 11': np.array([sublist[10] for sublist in sensors_presio_2]),
      'P2 sensor pressió 12': np.array([sublist[11] for sublist in sensors_presio_2]),
      'P2 sensor pressió 13': np.array([sublist[12] for sublist in sensors_presio_2]),
      'P2 sensor pressió 14': np.array([sublist[13] for sublist in sensors_presio_2]),
      'P2 Temps Sistema': np.array(temps_sistema_2),
      'P2 Calibració': np.array(calibracio_2)
})
    df['P1 Temps Sistema'] = [datetime.datetime.fromtimestamp(unix_time) for unix_time in df['P1 Temps Sistema']]
    df['P2 Temps Sistema'] = [datetime.datetime.fromtimestamp(unix_time) for unix_time in df['P2 Temps Sistema']]

  except FileNotFoundError:
    print("L'usuari o la data no son correctes")
    return

  return df

def create_df_final(ini,fin):
  df_final = pd.DataFrame()
  with open('/dates_estudiar.txt', 'r') as doc:
    lines = doc.readlines()
    analitzats = []
    i=ini
    for line in lines[ini:fin]:
      i+=1
      l_data = line[0:10]
      if (i<454):
        l_usuari = line[11:13]
      else:
        l_usuari = line[11:14]
      if int(l_usuari) in u_falls and int(l_usuari) not in analitzats:
        print("L'usuari " + l_usuari + " té caigudes")
        ruta_archivo = 'data/'+l_usuari+'/Falls.txt'
        # Leer el archivo y convertir las fechas a objetos datetime
        with open(ruta_archivo, 'r') as file:
          fechas = [datetime.datetime.strptime(line.strip(), "%m/%d/%Y %H:%M:%S") for line in file]
        # Crear el DataFrame con las fechas
        df_fechas = pd.DataFrame({'Fecha': fechas})
        analitzats.append(int(l_usuari))
      print("Creant df de l'usuari "+l_usuari+" per la data " + l_data + "   Linia "+str(i)+"/"+str(fin))
      df = create_df(l_usuari,l_data)
      if int(l_usuari) in u_falls:
        df['Fall'] = ((df['P1 Temps Sistema'].isin(df_fechas['Fecha'])) | (df['P2 Temps Sistema'].isin(df_fechas['Fecha']))).astype(int)
      else:
        df['Fall'] = 0
      df_final = pd.concat([df_final,df])
  return df_final

"""## Creació dataframes"""

df1 = create_df_final(0,100)
df1.to_csv("df1.csv")

df1.memory_usage().sum()

df2 = create_df_final(100,200)
df2.memory_usage().sum()
df2.to_csv("df2.csv")

df3 = create_df_final(200,300)
print(df3.memory_usage().sum())
df3.to_csv("df3.csv")

df4 = create_df_final(300,400)
print(df4.memory_usage().sum())
df4.to_csv("df4.csv")

df5 = create_df_final(400,492)
print(df5.memory_usage().sum())
df5.to_csv("df5.csv")

"""## Concatenar dataframes"""

df_concatenate = pd.concat([df1,df2,df3,df4,df5])
df_concatenate.to_csv("df_concatenate.csv")